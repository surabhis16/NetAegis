{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":6376134,"sourceType":"datasetVersion","datasetId":3674161}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport os\n\nfolder_path = \"/kaggle/input/network-intrusion-dataset\"\n\ncsv_files = [f for f in os.listdir(folder_path) if f.endswith('.csv')]\n\n# Load and merge\ndfs = []\nfor file in csv_files:\n    path = os.path.join(folder_path, file)\n    df = pd.read_csv(path, low_memory=False)\n    dfs.append(df)\n\n# Combine all\ndata = pd.concat(dfs, ignore_index=True)\n\n# Clean column names\ndata.columns = data.columns.str.strip()\n\n# Preview\nprint(data.shape)\ndata.head()","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:54:14.366101Z","iopub.execute_input":"2025-05-25T09:54:14.366443Z","iopub.status.idle":"2025-05-25T09:55:00.175238Z","shell.execute_reply.started":"2025-05-25T09:54:14.366421Z","shell.execute_reply":"2025-05-25T09:55:00.174128Z"}},"outputs":[{"name":"stdout","text":"(2830743, 79)\n","output_type":"stream"},{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   Destination Port  Flow Duration  Total Fwd Packets  Total Backward Packets  \\\n0                22        1266342                 41                      44   \n1                22        1319353                 41                      44   \n2                22            160                  1                       1   \n3                22        1303488                 41                      42   \n4             35396             77                  1                       2   \n\n   Total Length of Fwd Packets  Total Length of Bwd Packets  \\\n0                         2664                         6954   \n1                         2664                         6954   \n2                            0                            0   \n3                         2728                         6634   \n4                            0                            0   \n\n   Fwd Packet Length Max  Fwd Packet Length Min  Fwd Packet Length Mean  \\\n0                    456                      0               64.975610   \n1                    456                      0               64.975610   \n2                      0                      0                0.000000   \n3                    456                      0               66.536585   \n4                      0                      0                0.000000   \n\n   Fwd Packet Length Std  ...  min_seg_size_forward  Active Mean  Active Std  \\\n0             109.864573  ...                    32          0.0         0.0   \n1             109.864573  ...                    32          0.0         0.0   \n2               0.000000  ...                    32          0.0         0.0   \n3             110.129945  ...                    32          0.0         0.0   \n4               0.000000  ...                    32          0.0         0.0   \n\n   Active Max  Active Min  Idle Mean  Idle Std  Idle Max  Idle Min   Label  \n0           0           0        0.0       0.0         0         0  BENIGN  \n1           0           0        0.0       0.0         0         0  BENIGN  \n2           0           0        0.0       0.0         0         0  BENIGN  \n3           0           0        0.0       0.0         0         0  BENIGN  \n4           0           0        0.0       0.0         0         0  BENIGN  \n\n[5 rows x 79 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Destination Port</th>\n      <th>Flow Duration</th>\n      <th>Total Fwd Packets</th>\n      <th>Total Backward Packets</th>\n      <th>Total Length of Fwd Packets</th>\n      <th>Total Length of Bwd Packets</th>\n      <th>Fwd Packet Length Max</th>\n      <th>Fwd Packet Length Min</th>\n      <th>Fwd Packet Length Mean</th>\n      <th>Fwd Packet Length Std</th>\n      <th>...</th>\n      <th>min_seg_size_forward</th>\n      <th>Active Mean</th>\n      <th>Active Std</th>\n      <th>Active Max</th>\n      <th>Active Min</th>\n      <th>Idle Mean</th>\n      <th>Idle Std</th>\n      <th>Idle Max</th>\n      <th>Idle Min</th>\n      <th>Label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>22</td>\n      <td>1266342</td>\n      <td>41</td>\n      <td>44</td>\n      <td>2664</td>\n      <td>6954</td>\n      <td>456</td>\n      <td>0</td>\n      <td>64.975610</td>\n      <td>109.864573</td>\n      <td>...</td>\n      <td>32</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>BENIGN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22</td>\n      <td>1319353</td>\n      <td>41</td>\n      <td>44</td>\n      <td>2664</td>\n      <td>6954</td>\n      <td>456</td>\n      <td>0</td>\n      <td>64.975610</td>\n      <td>109.864573</td>\n      <td>...</td>\n      <td>32</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>BENIGN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>22</td>\n      <td>160</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>32</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>BENIGN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>22</td>\n      <td>1303488</td>\n      <td>41</td>\n      <td>42</td>\n      <td>2728</td>\n      <td>6634</td>\n      <td>456</td>\n      <td>0</td>\n      <td>66.536585</td>\n      <td>110.129945</td>\n      <td>...</td>\n      <td>32</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>BENIGN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>35396</td>\n      <td>77</td>\n      <td>1</td>\n      <td>2</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>32</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.0</td>\n      <td>0.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>BENIGN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 79 columns</p>\n</div>"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"print(\"Columns in the dataset:\", data.columns.tolist())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-23T12:39:34.940834Z","iopub.execute_input":"2025-05-23T12:39:34.942052Z","iopub.status.idle":"2025-05-23T12:39:34.948591Z","shell.execute_reply.started":"2025-05-23T12:39:34.941993Z","shell.execute_reply":"2025-05-23T12:39:34.946887Z"}},"outputs":[{"name":"stdout","text":"Columns in the dataset: ['Destination Port', 'Flow Duration', 'Total Fwd Packets', 'Total Backward Packets', 'Total Length of Fwd Packets', 'Total Length of Bwd Packets', 'Fwd Packet Length Max', 'Fwd Packet Length Min', 'Fwd Packet Length Mean', 'Fwd Packet Length Std', 'Bwd Packet Length Max', 'Bwd Packet Length Min', 'Bwd Packet Length Mean', 'Bwd Packet Length Std', 'Flow Bytes/s', 'Flow Packets/s', 'Flow IAT Mean', 'Flow IAT Std', 'Flow IAT Max', 'Flow IAT Min', 'Fwd IAT Total', 'Fwd IAT Mean', 'Fwd IAT Std', 'Fwd IAT Max', 'Fwd IAT Min', 'Bwd IAT Total', 'Bwd IAT Mean', 'Bwd IAT Std', 'Bwd IAT Max', 'Bwd IAT Min', 'Fwd PSH Flags', 'Bwd PSH Flags', 'Fwd URG Flags', 'Bwd URG Flags', 'Fwd Header Length', 'Bwd Header Length', 'Fwd Packets/s', 'Bwd Packets/s', 'Min Packet Length', 'Max Packet Length', 'Packet Length Mean', 'Packet Length Std', 'Packet Length Variance', 'FIN Flag Count', 'SYN Flag Count', 'RST Flag Count', 'PSH Flag Count', 'ACK Flag Count', 'URG Flag Count', 'CWE Flag Count', 'ECE Flag Count', 'Down/Up Ratio', 'Average Packet Size', 'Avg Fwd Segment Size', 'Avg Bwd Segment Size', 'Fwd Header Length.1', 'Fwd Avg Bytes/Bulk', 'Fwd Avg Packets/Bulk', 'Fwd Avg Bulk Rate', 'Bwd Avg Bytes/Bulk', 'Bwd Avg Packets/Bulk', 'Bwd Avg Bulk Rate', 'Subflow Fwd Packets', 'Subflow Fwd Bytes', 'Subflow Bwd Packets', 'Subflow Bwd Bytes', 'Init_Win_bytes_forward', 'Init_Win_bytes_backward', 'act_data_pkt_fwd', 'min_seg_size_forward', 'Active Mean', 'Active Std', 'Active Max', 'Active Min', 'Idle Mean', 'Idle Std', 'Idle Max', 'Idle Min', 'Label']\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"print(\"Number of columns:\", data.shape[1])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-23T12:45:37.923148Z","iopub.execute_input":"2025-05-23T12:45:37.923505Z","iopub.status.idle":"2025-05-23T12:45:37.929362Z","shell.execute_reply.started":"2025-05-23T12:45:37.923479Z","shell.execute_reply":"2025-05-23T12:45:37.928320Z"}},"outputs":[{"name":"stdout","text":"Number of columns: 79\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"data['Label'].value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-22T16:22:57.605849Z","iopub.execute_input":"2025-05-22T16:22:57.606096Z","iopub.status.idle":"2025-05-22T16:22:57.794911Z","shell.execute_reply.started":"2025-05-22T16:22:57.606074Z","shell.execute_reply":"2025-05-22T16:22:57.794109Z"}},"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"Label\nBENIGN                        2273097\nDoS Hulk                       231073\nPortScan                       158930\nDDoS                           128027\nDoS GoldenEye                   10293\nFTP-Patator                      7938\nSSH-Patator                      5897\nDoS slowloris                    5796\nDoS Slowhttptest                 5499\nBot                              1966\nWeb Attack � Brute Force         1507\nWeb Attack � XSS                  652\nInfiltration                       36\nWeb Attack � Sql Injection         21\nHeartbleed                         11\nName: count, dtype: int64"},"metadata":{}}],"execution_count":2},{"cell_type":"code","source":"# Clean up label strings\ndata['Label'] = data['Label'].astype(str).str.strip()\n\n# Double-check unique labels\nprint(data['Label'].unique())\n\n# Apply binary encoding (0 for BENIGN, 1 for everything else)\ndata['Label'] = data['Label'].apply(lambda x: 0 if x.upper() == 'BENIGN' else 1)\n\n# Check counts again\nprint(data['Label'].value_counts())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:08.422974Z","iopub.execute_input":"2025-05-25T09:56:08.423382Z","iopub.status.idle":"2025-05-25T09:56:10.271215Z","shell.execute_reply.started":"2025-05-25T09:56:08.423355Z","shell.execute_reply":"2025-05-25T09:56:10.270272Z"}},"outputs":[{"name":"stdout","text":"['BENIGN' 'PortScan' 'Web Attack � Brute Force' 'Web Attack � XSS'\n 'Web Attack � Sql Injection' 'FTP-Patator' 'SSH-Patator' 'DDoS' 'Bot'\n 'Infiltration' 'DoS slowloris' 'DoS Slowhttptest' 'DoS Hulk'\n 'DoS GoldenEye' 'Heartbleed']\nLabel\n0    2273097\n1     557646\nName: count, dtype: int64\n","output_type":"stream"}],"execution_count":3},{"cell_type":"code","source":"X = data.drop(columns=['Label'])  \ny = data['Label']  # Target variable","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:12.518283Z","iopub.execute_input":"2025-05-25T09:56:12.518716Z","iopub.status.idle":"2025-05-25T09:56:13.345843Z","shell.execute_reply.started":"2025-05-25T09:56:12.518683Z","shell.execute_reply":"2025-05-25T09:56:13.344613Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"import numpy as np\n\n# Check for infinite values\nprint(np.any(np.isinf(X)))\n\n# Replace infinite values with NaN\nX = np.where(np.isinf(X), np.nan, X)\n\n# Check for NaN values in the features\nprint(np.any(np.isnan(X)))\n\n# Replace NaN values with the mean of the column\nfrom sklearn.impute import SimpleImputer\nimputer = SimpleImputer(strategy='mean')\nX = imputer.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:16.470412Z","iopub.execute_input":"2025-05-25T09:56:16.470761Z","iopub.status.idle":"2025-05-25T09:56:26.567816Z","shell.execute_reply.started":"2025-05-25T09:56:16.470725Z","shell.execute_reply":"2025-05-25T09:56:26.566623Z"}},"outputs":[{"name":"stdout","text":"True\nTrue\n","output_type":"stream"}],"execution_count":5},{"cell_type":"code","source":"# Apply scaling again\nfrom sklearn.preprocessing import StandardScaler\nscaler = StandardScaler()\nX_scaled = scaler.fit_transform(X)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:30.427211Z","iopub.execute_input":"2025-05-25T09:56:30.427873Z","iopub.status.idle":"2025-05-25T09:56:33.896685Z","shell.execute_reply.started":"2025-05-25T09:56:30.427847Z","shell.execute_reply":"2025-05-25T09:56:33.895594Z"}},"outputs":[],"execution_count":7},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42, stratify=y)\nprint(X_train.shape, X_test.shape, y_train.shape, y_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:38.457309Z","iopub.execute_input":"2025-05-25T09:56:38.457631Z","iopub.status.idle":"2025-05-25T09:56:42.625401Z","shell.execute_reply.started":"2025-05-25T09:56:38.457607Z","shell.execute_reply":"2025-05-25T09:56:42.624404Z"}},"outputs":[{"name":"stdout","text":"(2264594, 78) (566149, 78) (2264594,) (566149,)\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"from sklearn.model_selection import GridSearchCV, RandomizedSearchCV\nfrom sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.svm import SVC\nfrom sklearn.neighbors import KNeighborsClassifier\nfrom sklearn.metrics import classification_report\nfrom scipy.stats import uniform","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:45.221204Z","iopub.execute_input":"2025-05-25T09:56:45.221534Z","iopub.status.idle":"2025-05-25T09:56:45.227190Z","shell.execute_reply.started":"2025-05-25T09:56:45.221506Z","shell.execute_reply":"2025-05-25T09:56:45.226040Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report\n\nrf_model = RandomForestClassifier(random_state=42)\n\n# Train the model\nrf_model.fit(X_train, y_train)\n\n# Make predictions\nrf_pred = rf_model.predict(X_test)\n\n# Evaluate the model\nprint(\"Random Forest Classification Report:\")\nprint(classification_report(y_test, rf_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:59:47.357607Z","iopub.execute_input":"2025-05-25T09:59:47.357992Z","iopub.status.idle":"2025-05-25T10:17:50.619279Z","shell.execute_reply.started":"2025-05-25T09:59:47.357968Z","shell.execute_reply":"2025-05-25T10:17:50.617618Z"}},"outputs":[{"name":"stdout","text":"Random Forest Classification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      1.00      1.00    454620\n           1       1.00      1.00      1.00    111529\n\n    accuracy                           1.00    566149\n   macro avg       1.00      1.00      1.00    566149\nweighted avg       1.00      1.00      1.00    566149\n\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n\n# Print accuracy\nprint(\"Accuracy:\", accuracy_score(y_test, rf_pred))\n\n# Generate and display confusion matrix\ncm = confusion_matrix(y_test, rf_pred)\ndisp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=rf_model.classes_)\ndisp.plot(cmap='Blues')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-22T16:39:54.221815Z","iopub.execute_input":"2025-05-22T16:39:54.222584Z","iopub.status.idle":"2025-05-22T16:39:54.791215Z","shell.execute_reply.started":"2025-05-22T16:39:54.222558Z","shell.execute_reply":"2025-05-22T16:39:54.790429Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.9990196926957391\n","output_type":"stream"},{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7e9515dcb490>"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":11},{"cell_type":"code","source":"from sklearn.ensemble import IsolationForest\n\n# Train Isolation Forest (unsupervised) on your existing training features\niso_forest = IsolationForest(n_estimators=100, contamination=0.1, random_state=42)\niso_forest.fit(X_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:56:51.709965Z","iopub.execute_input":"2025-05-25T09:56:51.710881Z","iopub.status.idle":"2025-05-25T09:58:13.037741Z","shell.execute_reply.started":"2025-05-25T09:56:51.710849Z","shell.execute_reply":"2025-05-25T09:58:13.036689Z"}},"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"IsolationForest(contamination=0.1, random_state=42)","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>IsolationForest(contamination=0.1, random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">IsolationForest</label><div class=\"sk-toggleable__content\"><pre>IsolationForest(contamination=0.1, random_state=42)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":10},{"cell_type":"code","source":"# Isolation Forest prediction: -1 means anomaly, 1 means normal\niso_pred = iso_forest.predict(X_test)\n\n# Convert to binary labels: anomaly=1, normal=0\niso_pred_binary = np.where(iso_pred == -1, 1, 0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T09:58:31.025194Z","iopub.execute_input":"2025-05-25T09:58:31.027598Z","iopub.status.idle":"2025-05-25T09:59:09.010879Z","shell.execute_reply.started":"2025-05-25T09:58:31.027549Z","shell.execute_reply":"2025-05-25T09:59:09.009615Z"}},"outputs":[],"execution_count":11},{"cell_type":"code","source":"# rf_pred is your Random Forest prediction from your existing code\n\ncombined_pred = []\n\nfor rf_p, iso_p in zip(rf_pred, iso_pred_binary):\n    if rf_p == 1:\n        combined_pred.append(1)  # If RF predicts attack, predict attack\n    elif iso_p == 1:\n        combined_pred.append(1)  # Else if Isolation Forest flags anomaly, predict attack\n    else:\n        combined_pred.append(0)  # Otherwise benign","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T10:18:27.195102Z","iopub.execute_input":"2025-05-25T10:18:27.195523Z","iopub.status.idle":"2025-05-25T10:18:27.417422Z","shell.execute_reply.started":"2025-05-25T10:18:27.195496Z","shell.execute_reply":"2025-05-25T10:18:27.415610Z"}},"outputs":[],"execution_count":13},{"cell_type":"code","source":"from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay, accuracy_score\nimport matplotlib.pyplot as plt\n\nprint(\"Combined Model Classification Report:\")\nprint(classification_report(y_test, combined_pred))\n\nprint(\"Combined Model Accuracy:\", accuracy_score(y_test, combined_pred))\n\ncm_combined = confusion_matrix(y_test, combined_pred)\ndisp_combined = ConfusionMatrixDisplay(confusion_matrix=cm_combined, display_labels=[0,1])\ndisp_combined.plot(cmap='coolwarm')\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T10:18:39.863339Z","iopub.execute_input":"2025-05-25T10:18:39.863736Z","iopub.status.idle":"2025-05-25T10:18:41.739722Z","shell.execute_reply.started":"2025-05-25T10:18:39.863707Z","shell.execute_reply":"2025-05-25T10:18:41.738500Z"}},"outputs":[{"name":"stdout","text":"Combined Model Classification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      0.94      0.97    454620\n           1       0.80      1.00      0.89    111529\n\n    accuracy                           0.95    566149\n   macro avg       0.90      0.97      0.93    566149\nweighted avg       0.96      0.95      0.95    566149\n\nCombined Model Accuracy: 0.949882451439462\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":14},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix\n\ncm = confusion_matrix(y_test, combined_pred)\ntn, fp, fn, tp = cm.ravel()\n\nprint(f\"True Positives (anomalies caught): {tp}\")\nprint(f\"False Negatives (missed anomalies): {fn}\")\nprint(f\"False Positives (false alarms): {fp}\")\nprint(f\"True Negatives (normal correctly classified): {tn}\")\n\n# Calculate Detection Rate (Recall for anomalies)\ndetection_rate = tp / (tp + fn)\nprint(f\"Detection Rate (Recall for anomalies): {detection_rate:.4f}\")\n\n# Calculate False Alarm Rate\nfalse_alarm_rate = fp / (fp + tn)\nprint(f\"False Alarm Rate: {false_alarm_rate:.4f}\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T10:23:19.384088Z","iopub.execute_input":"2025-05-25T10:23:19.384522Z","iopub.status.idle":"2025-05-25T10:23:19.614983Z","shell.execute_reply.started":"2025-05-25T10:23:19.384485Z","shell.execute_reply":"2025-05-25T10:23:19.613932Z"}},"outputs":[{"name":"stdout","text":"True Positives (anomalies caught): 111297\nFalse Negatives (missed anomalies): 232\nFalse Positives (false alarms): 28142\nTrue Negatives (normal correctly classified): 426478\nDetection Rate (Recall for anomalies): 0.9979\nFalse Alarm Rate: 0.0619\n","output_type":"stream"}],"execution_count":15},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nfrom sklearn.metrics import roc_curve, roc_auc_score\n\n# Get predicted probabilities for the positive class (anomaly = 1)\nrf_probs = rf_model.predict_proba(X_test)[:, 1]\n\n# Calculate ROC curve\nfpr, tpr, thresholds = roc_curve(y_test, rf_probs)\n\n# Calculate AUC (Area Under Curve)\nauc_score = roc_auc_score(y_test, rf_probs)\nprint(f\"Random Forest ROC AUC: {auc_score:.4f}\")\n\n# Plot ROC curve\nplt.figure(figsize=(8,6))\nplt.plot(fpr, tpr, label=f'RF (AUC = {auc_score:.4f})')\nplt.plot([0, 1], [0, 1], 'k--')  # diagonal line for random guess\nplt.xlabel('False Positive Rate')\nplt.ylabel('True Positive Rate (Recall)')\nplt.title('Receiver Operating Characteristic (ROC) Curve')\nplt.legend(loc='lower right')\nplt.grid()\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T10:24:04.131861Z","iopub.execute_input":"2025-05-25T10:24:04.132238Z","iopub.status.idle":"2025-05-25T10:24:11.362187Z","shell.execute_reply.started":"2025-05-25T10:24:04.132212Z","shell.execute_reply":"2025-05-25T10:24:11.360849Z"}},"outputs":[{"name":"stdout","text":"Random Forest ROC AUC: 0.9999\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 800x600 with 1 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":16},{"cell_type":"code","source":"import joblib\n\njoblib.dump(rf_model, 'rf_model.pkl')          \njoblib.dump(iso_forest, 'iso_model.pkl')        \njoblib.dump(scaler, 'scaler.pkl')            \njoblib.dump(imputer, 'imputer.pkl')            ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T10:30:28.558712Z","iopub.execute_input":"2025-05-25T10:30:28.559714Z","iopub.status.idle":"2025-05-25T10:30:28.723970Z","shell.execute_reply.started":"2025-05-25T10:30:28.559678Z","shell.execute_reply":"2025-05-25T10:30:28.723139Z"}},"outputs":[{"execution_count":18,"output_type":"execute_result","data":{"text/plain":"['imputer.pkl']"},"metadata":{}}],"execution_count":18},{"cell_type":"code","source":"import tensorflow as tf\nfrom tensorflow.keras.models import Model\nfrom tensorflow.keras.layers import Input, Dense\nfrom sklearn.metrics import classification_report\n\n# Step 1: Prepare training data only with benign samples for autoencoder training\nX_train_ae = X_train[y_train == 0]  # benign only\n\n# Step 2: Define the autoencoder model\ninput_dim = X_train_ae.shape[1]\nencoding_dim = 14  # smaller dimension for compression, adjust as needed\n\ninput_layer = Input(shape=(input_dim,))\nencoded = Dense(encoding_dim, activation='relu')(input_layer)\nencoded = Dense(encoding_dim // 2, activation='relu')(encoded)\ndecoded = Dense(encoding_dim, activation='relu')(encoded)\ndecoded = Dense(input_dim, activation='linear')(decoded)\n\nautoencoder = Model(inputs=input_layer, outputs=decoded)\nautoencoder.compile(optimizer='adam', loss='mse')\n\n# Step 3: Train the autoencoder on benign data only\nautoencoder.fit(X_train_ae, X_train_ae,\n                epochs=20,\n                batch_size=256,\n                shuffle=True,\n                validation_split=0.1,\n                verbose=2)\n\n# Step 4: Compute reconstruction error on test data\nX_test_pred = autoencoder.predict(X_test)\nreconstruction_error = tf.keras.losses.mse(X_test, X_test_pred).numpy()\n\n# Step 5: Choose threshold for anomaly classification (e.g., 95th percentile on benign train errors)\nX_train_ae_pred = autoencoder.predict(X_train_ae)\ntrain_reconstruction_error = tf.keras.losses.mse(X_train_ae, X_train_ae_pred).numpy()\nthreshold = np.percentile(train_reconstruction_error, 95)\n\n# Step 6: Predict anomalies based on threshold\nae_pred_binary = (reconstruction_error > threshold).astype(int)\n\n# Step 7: Combine predictions (Random Forest, Isolation Forest, Autoencoder)\ncombined_pred_final = []\nfor rf_p, iso_p, ae_p in zip(rf_pred, iso_pred_binary, ae_pred_binary):\n    if rf_p == 1:\n        combined_pred_final.append(1)\n    elif iso_p == 1:\n        combined_pred_final.append(1)\n    elif ae_p == 1:\n        combined_pred_final.append(1)\n    else:\n        combined_pred_final.append(0)\n\n# Step 8: Evaluate combined model\nprint(\"Combined Model with Autoencoder Classification Report:\")\nprint(classification_report(y_test, combined_pred_final))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-25T10:45:01.574625Z","iopub.execute_input":"2025-05-25T10:45:01.575105Z","iopub.status.idle":"2025-05-25T10:52:46.690038Z","shell.execute_reply.started":"2025-05-25T10:45:01.575044Z","shell.execute_reply":"2025-05-25T10:52:46.689107Z"}},"outputs":[{"name":"stderr","text":"2025-05-25 10:45:04.119309: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\nWARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nE0000 00:00:1748169904.420171      31 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\nE0000 00:00:1748169904.523845      31 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n2025-05-25 10:45:21.952958: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n","output_type":"stream"},{"name":"stdout","text":"Epoch 1/20\n6394/6394 - 17s - 3ms/step - loss: 0.3555 - val_loss: 0.2739\nEpoch 2/20\n6394/6394 - 14s - 2ms/step - loss: 0.2587 - val_loss: 0.2396\nEpoch 3/20\n6394/6394 - 14s - 2ms/step - loss: 0.2399 - val_loss: 0.2195\nEpoch 4/20\n6394/6394 - 15s - 2ms/step - loss: 0.2306 - val_loss: 0.2097\nEpoch 5/20\n6394/6394 - 15s - 2ms/step - loss: 0.2243 - val_loss: 0.2118\nEpoch 6/20\n6394/6394 - 14s - 2ms/step - loss: 0.2216 - val_loss: 0.2044\nEpoch 7/20\n6394/6394 - 15s - 2ms/step - loss: 0.2197 - val_loss: 0.1987\nEpoch 8/20\n6394/6394 - 15s - 2ms/step - loss: 0.2171 - val_loss: 0.1958\nEpoch 9/20\n6394/6394 - 16s - 2ms/step - loss: 0.2152 - val_loss: 0.1878\nEpoch 10/20\n6394/6394 - 15s - 2ms/step - loss: 0.2120 - val_loss: 0.1761\nEpoch 11/20\n6394/6394 - 14s - 2ms/step - loss: 0.2071 - val_loss: 0.1707\nEpoch 12/20\n6394/6394 - 15s - 2ms/step - loss: 0.2017 - val_loss: 0.1646\nEpoch 13/20\n6394/6394 - 14s - 2ms/step - loss: 0.1962 - val_loss: 0.1681\nEpoch 14/20\n6394/6394 - 14s - 2ms/step - loss: 0.2032 - val_loss: 0.1680\nEpoch 15/20\n6394/6394 - 14s - 2ms/step - loss: 0.1945 - val_loss: 0.1736\nEpoch 16/20\n6394/6394 - 14s - 2ms/step - loss: 0.1906 - val_loss: 0.1714\nEpoch 17/20\n6394/6394 - 14s - 2ms/step - loss: 0.2009 - val_loss: 0.1653\nEpoch 18/20\n6394/6394 - 13s - 2ms/step - loss: 0.1980 - val_loss: 0.1647\nEpoch 19/20\n6394/6394 - 14s - 2ms/step - loss: 0.1947 - val_loss: 0.1766\nEpoch 20/20\n6394/6394 - 14s - 2ms/step - loss: 0.1922 - val_loss: 0.1862\n\u001b[1m17693/17693\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m26s\u001b[0m 1ms/step\n\u001b[1m56828/56828\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 1ms/step\nCombined Model with Autoencoder Classification Report:\n              precision    recall  f1-score   support\n\n           0       1.00      0.91      0.95    454620\n           1       0.74      1.00      0.85    111529\n\n    accuracy                           0.93    566149\n   macro avg       0.87      0.96      0.90    566149\nweighted avg       0.95      0.93      0.93    566149\n\n","output_type":"stream"}],"execution_count":19}]}